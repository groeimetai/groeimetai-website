rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Allow users to read/write their own documents
    match /documents/{userId}/{allPaths=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) &&
                      request.resource.size < 50 * 1024 * 1024; // 50MB max file size
      allow delete: if isOwner(userId);
    }
    
    // Allow users to read/write their own uploads (for chat attachments)
    match /uploads/{userId}/{allPaths=**} {
      allow read: if isAuthenticated();  // Any authenticated user can read (for shared files)
      allow create: if isOwner(userId) &&
                       request.resource.size < 10 * 1024 * 1024; // 10MB max file size
      allow write: if isOwner(userId) &&
                      request.resource.size < 10 * 1024 * 1024; // 10MB max file size
      allow delete: if isOwner(userId);
    }
    
    // Allow users to read/write their own avatars
    match /avatars/{userId}/{allPaths=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) &&
                      request.resource.size < 5 * 1024 * 1024 && // 5MB max for avatars
                      request.resource.contentType.matches('image/.*'); // Must be an image
      allow delete: if isOwner(userId);
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
