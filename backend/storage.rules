rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        request.auth.token.roles != null &&
        role in request.auth.token.roles;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && 
        request.auth.token.roles != null &&
        request.auth.token.roles.hasAny(roles);
    }
    
    // Validate file size (max 10MB for documents, 50MB for videos)
    function isValidFileSize(maxSize) {
      return request.resource.size <= maxSize;
    }
    
    // Validate file type
    function isValidImageType() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidDocumentType() {
      return request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('application/msword') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.*') ||
             request.resource.contentType.matches('text/plain');
    }
    
    function isValidVideoType() {
      return request.resource.contentType.matches('video/.*');
    }
    
    // User profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
        isValidImageType() && 
        isValidFileSize(5 * 1024 * 1024); // 5MB max
      allow delete: if isOwner(userId) || hasRole('admin');
    }
    
    // User documents (private)
    match /users/{userId}/documents/{document=**} {
      allow read: if isOwner(userId) || hasRole('admin');
      allow write: if isOwner(userId) && 
        isValidDocumentType() && 
        isValidFileSize(10 * 1024 * 1024); // 10MB max
      allow delete: if isOwner(userId) || hasRole('admin');
    }
    
    // User documents in root documents folder
    match /documents/{userId}/{document=**} {
      allow read: if isOwner(userId) || hasRole('admin');
      allow write: if isOwner(userId) && 
        isValidFileSize(50 * 1024 * 1024); // 50MB max
      allow delete: if isOwner(userId) || hasRole('admin');
    }
    
    // Consultation files
    match /consultations/{consultationId}/files/{fileName} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.metadata['uploadedBy'] ||
         request.auth.uid == resource.metadata['clientId'] ||
         request.auth.uid == resource.metadata['consultantId'] ||
         hasRole('admin'));
      
      allow create: if isAuthenticated() &&
        (request.auth.uid == request.resource.metadata['clientId'] ||
         request.auth.uid == request.resource.metadata['consultantId']) &&
        request.resource.metadata['uploadedBy'] == request.auth.uid &&
        (isValidDocumentType() || isValidImageType()) &&
        isValidFileSize(10 * 1024 * 1024); // 10MB max
      
      allow delete: if isAuthenticated() &&
        (request.auth.uid == resource.metadata['uploadedBy'] ||
         hasRole('admin'));
    }
    
    // Quote attachments
    match /quotes/{quoteId}/attachments/{fileName} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.metadata['clientId'] ||
         request.auth.uid == resource.metadata['consultantId'] ||
         hasRole('admin'));
      
      allow write: if isAuthenticated() &&
        hasAnyRole(['consultant', 'admin']) &&
        request.auth.uid == request.resource.metadata['consultantId'] &&
        isValidDocumentType() &&
        isValidFileSize(10 * 1024 * 1024); // 10MB max
      
      allow delete: if isAuthenticated() &&
        (request.auth.uid == resource.metadata['consultantId'] ||
         hasRole('admin'));
    }
    
    // Message attachments
    match /messages/{messageId}/attachments/{fileName} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.metadata['senderId'] ||
         request.auth.uid == resource.metadata['recipientId'] ||
         hasRole('admin'));
      
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.metadata['senderId'] &&
        (isValidDocumentType() || isValidImageType()) &&
        isValidFileSize(10 * 1024 * 1024); // 10MB max
      
      allow delete: if false; // Messages and attachments are immutable
    }
    
    // User uploads (for chat attachments and general file sharing)
    match /uploads/{userId}/{fileName=**} {
      allow read: if isAuthenticated(); // Any authenticated user can read shared files
      
      allow create: if isOwner(userId) &&
        isValidFileSize(10 * 1024 * 1024); // 10MB max
      
      allow write: if isOwner(userId) &&
        isValidFileSize(10 * 1024 * 1024); // 10MB max
      
      allow delete: if isOwner(userId) || hasRole('admin');
    }
    
    // Video consultation recordings
    match /consultations/{consultationId}/recordings/{fileName} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.metadata['clientId'] ||
         request.auth.uid == resource.metadata['consultantId'] ||
         hasRole('admin'));
      
      allow create: if isAuthenticated() &&
        hasAnyRole(['consultant', 'system']) &&
        isValidVideoType() &&
        isValidFileSize(50 * 1024 * 1024); // 50MB max
      
      allow delete: if hasRole('admin');
    }
    
    // Public assets (company resources, etc.)
    match /public/{fileName=**} {
      allow read: if true;
      allow write: if hasRole('admin');
    }
    
    // Temporary uploads (auto-deleted after 24 hours)
    match /temp/{userId}/{fileName} {
      allow read, write: if isOwner(userId) &&
        isValidFileSize(10 * 1024 * 1024); // 10MB max
      allow delete: if isOwner(userId) || hasRole('system');
    }
    
    // System files (logs, exports, etc.)
    match /system/{path=**} {
      allow read: if hasRole('admin');
      allow write: if hasAnyRole(['admin', 'system']);
    }
    
    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}