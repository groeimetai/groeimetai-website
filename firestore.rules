rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isValidContactSubmission(data) {
      return data.keys().hasAll(['name', 'email', 'company', 'submittedAt', 'status']) &&
             data.name is string && data.name.size() > 0 &&
             data.email is string && data.email.matches('.*@.*\\..*') &&
             data.status == 'new' &&
             data.source == 'website_contact_form';
    }
    
    function isValidEmailData(data) {
      return data.keys().hasAll(['to', 'message']) &&
             data.to is string && data.to.matches('.*@.*\\..*') &&
             data.message is map &&
             data.message.keys().hasAll(['subject', 'html']);
    }
    
    // Contact submissions - allow public write with validation
    match /contact_submissions/{document} {
      allow create: if isValidContactSubmission(request.resource.data);
      allow read, update, delete: if isAdmin();
    }

    // Mail collection - allow public write for email system  
    match /mail/{document} {
      allow create: if isValidEmailData(request.resource.data);
      allow read, update: if isAdmin();
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile or admin profiles (for messaging)
      allow read: if isOwner(userId) || isAdmin() || 
                    (isAuthenticated() && resource.data.role == 'admin');
      
      // Users can create their own profile during registration
      allow create: if isOwner(userId);
      
      // Users can update their own profile (including adding assessments, proposals, etc.)
      allow update: if isOwner(userId) || isAdmin();
      
      // Only admins can delete user profiles
      allow delete: if isAdmin();
    }
    
    // Quotes collection
    match /quotes/{quoteId} {
      // Anyone can create a quote (including guests)
      allow create: if true;
      
      // Users can read their own quotes, admins can read all
      allow read: if isAuthenticated() && (
                    (resource.data.userId == request.auth.uid) || 
                    (resource.data.email == request.auth.token.email) ||
                    isAdmin()
                    );
      
      // Users can update their own quotes, admins can update all
      allow update: if isAuthenticated() && (
                      (resource.data.userId == request.auth.uid) || 
                      isAdmin()
                      );
      
      // Only admins can delete quotes
      allow delete: if isAdmin();
      
      // Messages subcollection
      match /messages/{messageId} {
        // Users can read messages if they can read the parent quote
        allow read: if isAuthenticated() && (
                      get(/databases/$(database)/documents/quotes/$(quoteId)).data.userId == request.auth.uid ||
                      get(/databases/$(database)/documents/quotes/$(quoteId)).data.email == request.auth.token.email ||
                      isAdmin()
                      );
        
        // Users can create messages if they can read the parent quote
        allow create: if isAuthenticated() && (
                        get(/databases/$(database)/documents/quotes/$(quoteId)).data.userId == request.auth.uid ||
                        get(/databases/$(database)/documents/quotes/$(quoteId)).data.email == request.auth.token.email ||
                        isAdmin()
                        );
        
        // No updates or deletes allowed
        allow update: if false;
        allow delete: if false;
      }
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Users can read projects they're involved in
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.clientId == request.auth.uid ||
        resource.data.consultantId == request.auth.uid ||
        request.auth.uid in resource.data.teamIds ||
        isAdmin()
      );
      
      // Authenticated users can create projects (for quote requests)
      // Admins and consultants have full create permissions
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'consultant']
      );
      
      // Project participants and admins can update
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.consultantId == request.auth.uid ||
        isAdmin()
      );
      
      // Only admins can delete projects
      allow delete: if isAdmin();
    }
    
    // Messages collection
    match /messages/{messageId} {
      // Users can read messages in conversations they're part of
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participantIds;
      
      // Users can create messages in conversations they're part of
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/conversations/$(request.data.conversationId)) &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(request.data.conversationId)).data.participantIds;
      
      // Users can update their own messages
      allow update: if isAuthenticated() && resource.data.senderId == request.auth.uid;
      
      // Only message sender or admin can delete
      allow delete: if isAuthenticated() && (resource.data.senderId == request.auth.uid || isAdmin());
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Participants can read conversations
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      // Authenticated users can create conversations
      allow create: if isAuthenticated() && request.auth.uid in request.data.participantIds;
      
      // Participants can update conversations
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      // Only admins can delete conversations
      allow delete: if isAdmin();
    }
    
    // Consultations collection
    match /consultations/{consultationId} {
      // Users can read their own consultations
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Authenticated users can create consultations
      allow create: if isAuthenticated();
      
      // Users can update their own consultations
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Only admins can delete consultations
      allow delete: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Authenticated users can create notifications (for messaging)
      allow create: if isAuthenticated();
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Documents collection
    match /documents/{documentId} {
      // Users can read their own documents, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.uploadedBy.uid == request.auth.uid ||
        isAdmin()
      );
      
      // Users can create their own documents
      allow create: if isAuthenticated() && request.resource.data.uploadedBy.uid == request.auth.uid;
      
      // Users can update their own documents
      allow update: if isAuthenticated() && resource.data.uploadedBy.uid == request.auth.uid;
      
      // Users can delete their own documents
      allow delete: if isAuthenticated() && resource.data.uploadedBy.uid == request.auth.uid;
    }
    
    // Meetings collection
    match /meetings/{meetingId} {
      // Users can read meetings they're involved in, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in resource.data.participantIds ||
        isAdmin()
      );
      
      // Users can create meetings
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Users can update meetings they created or are participants in
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in resource.data.participantIds
      );
      
      // Users can delete meetings they created
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // UserSettings collection
    match /userSettings/{userId} {
      // Users can read their own settings
      allow read: if isOwner(userId);
      
      // Users can create their own settings
      allow create: if isOwner(userId);
      
      // Users can update their own settings
      allow update: if isOwner(userId);
      
      // Users can delete their own settings
      allow delete: if isOwner(userId);
    }
    
    // Assessments collection (separate collection for easier management)
    match /assessments/{assessmentId} {
      // Users can read their own assessments, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Users can create assessments
      allow create: if isAuthenticated();
      
      // Users can update their own assessments
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Only admins can delete assessments
      allow delete: if isAdmin();
    }
    
    // Expert Assessments collection
    match /expert_assessments/{assessmentId} {
      // Users can read their own expert assessments, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Authenticated users can create expert assessments
      allow create: if isAuthenticated();
      
      // Users can update their own assessments, admins can update all
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Only admins can delete expert assessments
      allow delete: if isAdmin();
    }
    
    // Agent Assessments collection (for Agent Readiness Assessments)
    match /agent_assessments/{assessmentId} {
      // Users can read their own assessments by userId OR email, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Anyone can create agent assessments (guest users via email)
      allow create: if true;
      
      // Users can update their own assessments, admins can update all
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Only admins can delete agent assessments
      allow delete: if isAdmin();
    }
    
    // Scheduled Emails collection (for follow-up automation)
    match /scheduled_emails/{emailId} {
      // Only admins can read scheduled emails (privacy)
      allow read: if isAdmin();
      
      // System can create scheduled emails
      allow create: if true;
      
      // System can update email status (sent, failed, etc.)
      allow update: if true;
      
      // Only admins can delete scheduled emails
      allow delete: if isAdmin();
    }
    
    // Project Timelines collection
    match /projectTimelines/{quoteId} {
      // Users can read timelines for their quotes
      allow read: if isAuthenticated() && (
        get(/databases/$(database)/documents/quotes/$(quoteId)).data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/quotes/$(quoteId)).data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Only admins can create/update timelines
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Support Chats collection
    match /supportChats/{chatId} {
      // Check if the chatId matches the expected format for the user
      function isUserChat() {
        return chatId == ('support_' + request.auth.uid);
      }
      
      // Check if user owns the chat based on userId field
      function isUserOwner() {
        return resource.data.userId == request.auth.uid;
      }
      
      // Extract userId from chatId (format: support_userId)
      function getChatUserId() {
        return chatId.split('_')[1];
      }
      
      // Users can read their own support chats, admins can read all
      allow read: if isAuthenticated() && (
        isUserChat() || 
        isUserOwner() ||
        isAdmin()
      );
      
      // Users can create their own support chats, admins can create any
      allow create: if isAuthenticated() && (
        isUserChat() ||
        request.resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Users and admins can update chats
      allow update: if isAuthenticated() && (
        isUserChat() ||
        isUserOwner() ||
        isAdmin()
      );
      
      // Only admins can delete support chats
      allow delete: if isAdmin();
      
      // Messages subcollection
      match /messages/{messageId} {
        // Users can read messages in their own chat, admins can read all
        allow read: if isAuthenticated() && (
          getChatUserId() == request.auth.uid ||
          isAdmin()
        );
        
        // Users can create messages in their own chats, admins can create in any chat
        allow create: if isAuthenticated() && (
          getChatUserId() == request.auth.uid ||
          isAdmin()
        );
        
        // No updates or deletes allowed
        allow update: if false;
        allow delete: if false;
      }
    }
    
    // Project Chats collection
    match /projectChats/{chatId} {
      // Users can read chats they're participants in
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participantIds ||
        isAdmin()
      );
      
      // Users can create chats they're part of
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participantIds;
      
      // Participants can update chat metadata
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.participantIds ||
        isAdmin()
      );
      
      // Only admins can delete chats
      allow delete: if isAdmin();
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/projectChats/$(chatId)).data.participantIds ||
          isAdmin()
        );
        
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/projectChats/$(chatId)).data.participantIds &&
          request.resource.data.senderId == request.auth.uid;
        
        allow update: if false;
        allow delete: if false;
      }
    }
    
    // General Chats collection
    match /chats/{chatId} {
      // Users can read chats they're participants in
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participantIds ||
        isAdmin()
      );
      
      // Users can create chats they're part of
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participantIds &&
        request.resource.data.keys().hasAll(['participantIds', 'createdAt', 'type']);
      
      // Participants can update chat metadata
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.participantIds ||
        isAdmin()
      );
      
      // Only admins can delete chats
      allow delete: if isAdmin();
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds ||
          isAdmin()
        );
        
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds &&
          request.resource.data.senderId == request.auth.uid &&
          request.resource.data.timestamp == request.time;
        
        allow update: if false;
        allow delete: if false;
      }
    }
    
    // Activity Logs collection (both activityLogs and activities for compatibility)
    match /activityLogs/{logId} {
      // Users can read their own activity logs, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      
      // Users can create logs for their own activities
      // Simplified rule - just check if authenticated user is logging their own activity
      allow create: if isAuthenticated();
      
      // No updates allowed (audit trail integrity)
      allow update: if false;
      
      // Only admins can delete logs
      allow delete: if isAdmin();
    }
    
    // Activities collection (used by activityLogger)
    match /activities/{activityId} {
      // Users can read their own activities, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      
      // System can create activities
      allow create: if true;
      
      // No updates allowed (audit trail integrity)
      allow update: if false;
      
      // Only admins can delete activities
      allow delete: if isAdmin();
    }
    
    // Invoices collection
    match /invoices/{invoiceId} {
      // Users can read their own invoices, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.clientEmail == request.auth.token.email ||
        isAdmin()
      );
      
      // Only admins can create invoices
      allow create: if isAdmin();
      
      // Only admins can update invoices
      allow update: if isAdmin();
      
      // Only admins can delete invoices
      allow delete: if isAdmin();
    }
    
    // Consultations collection
    match /consultations/{consultationId} {
      // Users can read their own consultations
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Authenticated users can create consultations
      allow create: if isAuthenticated();
      
      // Users can update their own consultations
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Only admins can delete consultations
      allow delete: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Authenticated users can create notifications (for messaging)
      allow create: if isAuthenticated();
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Documents collection
    match /documents/{documentId} {
      // Users can read their own documents, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.uploadedBy.uid == request.auth.uid ||
        isAdmin()
      );
      
      // Users can create their own documents
      allow create: if isAuthenticated() && request.resource.data.uploadedBy.uid == request.auth.uid;
      
      // Users can update their own documents
      allow update: if isAuthenticated() && resource.data.uploadedBy.uid == request.auth.uid;
      
      // Users can delete their own documents
      allow delete: if isAuthenticated() && resource.data.uploadedBy.uid == request.auth.uid;
    }
    
    // Meetings collection
    match /meetings/{meetingId} {
      // Users can read meetings they're involved in, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in resource.data.participantIds ||
        isAdmin()
      );
      
      // Users can create meetings
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Users can update meetings they created or are participants in
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in resource.data.participantIds
      );
      
      // Users can delete meetings they created
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // UserSettings collection
    match /userSettings/{userId} {
      // Users can read their own settings
      allow read: if isOwner(userId);
      
      // Users can create their own settings
      allow create: if isOwner(userId);
      
      // Users can update their own settings
      allow update: if isOwner(userId);
      
      // Users can delete their own settings
      allow delete: if isOwner(userId);
    }
    
    // Assessments collection (separate collection for easier management)
    match /assessments/{assessmentId} {
      // Users can read their own assessments, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Users can create assessments
      allow create: if isAuthenticated();
      
      // Users can update their own assessments
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Only admins can delete assessments
      allow delete: if isAdmin();
    }
    
    // Expert Assessments collection
    match /expert_assessments/{assessmentId} {
      // Users can read their own expert assessments, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Authenticated users can create expert assessments
      allow create: if isAuthenticated();
      
      // Users can update their own assessments, admins can update all
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Only admins can delete expert assessments
      allow delete: if isAdmin();
    }
    
    // Agent Assessments collection (for Agent Readiness Assessments)
    match /agent_assessments/{assessmentId} {
      // Users can read their own assessments by userId OR email, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Anyone can create agent assessments (guest users via email)
      allow create: if true;
      
      // Users can update their own assessments, admins can update all
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Only admins can delete agent assessments
      allow delete: if isAdmin();
    }
    
    // Scheduled Emails collection (for follow-up automation)
    match /scheduled_emails/{emailId} {
      // Only admins can read scheduled emails (privacy)
      allow read: if isAdmin();
      
      // System can create scheduled emails
      allow create: if true;
      
      // System can update email status (sent, failed, etc.)
      allow update: if true;
      
      // Only admins can delete scheduled emails
      allow delete: if isAdmin();
    }
    
    // ===== NEW DASHBOARD COLLECTIONS =====
    
    // Performance Metrics collection
    match /performanceMetrics/{metricId} {
      // Users can read their own metrics, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        isAdmin()
      );
      
      // System can create performance metrics
      allow create: if true;
      
      // System and admins can update metrics
      allow update: if isAdmin();
      
      // Only admins can delete metrics
      allow delete: if isAdmin();
    }
    
    // System Metrics collection
    match /systemMetrics/{clientId} {
      // Users can read their own system metrics, admins can read all
      allow read: if isAuthenticated() && (
        clientId == request.auth.uid ||
        isAdmin()
      );
      
      // System can create/update system metrics
      allow create: if true;
      allow update: if true;
      
      // Only admins can delete system metrics
      allow delete: if isAdmin();
    }
    
    // Agent Activities collection
    match /agentActivities/{activityId} {
      // Users can read their own activities, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        isAdmin()
      );
      
      // System can create agent activities
      allow create: if true;
      
      // No updates allowed (audit trail)
      allow update: if false;
      
      // Only admins can delete activities
      allow delete: if isAdmin();
    }
    
    // MCP Servers collection
    match /mcpServers/{serverId} {
      // Users can read their own MCP servers, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        isAdmin()
      );
      
      // Users can create their own MCP server configs
      allow create: if isAuthenticated() && 
        request.resource.data.clientId == request.auth.uid;
      
      // Users can update their own MCP servers
      allow update: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        isAdmin()
      );
      
      // Users can delete their own MCP servers
      allow delete: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        isAdmin()
      );
    }
    
    // Reports collection
    match /reports/{reportId} {
      // Users can read their own reports, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        isAdmin()
      );
      
      // System and admins can create reports
      allow create: if isAdmin();
      
      // System and admins can update reports
      allow update: if isAdmin();
      
      // Only admins can delete reports
      allow delete: if isAdmin();
    }
    
    // Workflow collections
    match /workflows/{workflowId} {
      // Users can read workflows, admins can read all
      allow read: if isAuthenticated();
      
      // Only admins can create workflows
      allow create: if isAdmin();
      
      // Only admins can update workflows
      allow update: if isAdmin();
      
      // Only admins can delete workflows
      allow delete: if isAdmin();
    }
    
    match /workflow_executions/{executionId} {
      // Users can read their own executions
      allow read: if isAuthenticated();
      
      // System can create executions
      allow create: if true;
      
      // System can update executions
      allow update: if true;
      
      // Only admins can delete executions
      allow delete: if isAdmin();
    }
    
    // Payments collection
    match /payments/{paymentId} {
      // Users can read their own payments, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        isAdmin()
      );
      
      // System can create payments
      allow create: if true;
      
      // System can update payment status
      allow update: if true;
      
      // Only admins can delete payments
      allow delete: if isAdmin();
    }

    // Expert Assessment Projects collection
    match /expert_assessment_projects/{projectId} {
      // Users can read their own projects, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Users can create their own projects
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Users can update their own projects, admins can update all
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Only admins can delete projects
      allow delete: if isAdmin();
    }
    
    // User Journey collection
    match /userJourney/{userId} {
      // Users can read their own journey, admins can read all
      allow read: if isAuthenticated() && (
        userId == request.auth.uid ||
        isAdmin()
      );
      
      // System can create/update journey data
      allow create: if true;
      allow update: if true;
      
      // Only admins can delete journey data
      allow delete: if isAdmin();
    }
    
    // Implementation Proposals collection
    match /implementation_proposals/{proposalId} {
      // Users can read their own proposals, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Users can create their own proposals
      allow create: if isAuthenticated();
      
      // Users can update their own proposals, admins can update all
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Only admins can delete proposals
      allow delete: if isAdmin();
    }
    
    // Pilot Intakes collection
    match /pilot_intakes/{intakeId} {
      // Users can read their own intakes, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        isAdmin()
      );
      
      // Users can create their own intakes
      allow create: if isAuthenticated();
      
      // Users can update their own intakes, admins can update all
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Only admins can delete intakes
      allow delete: if isAdmin();
    }

    // Catch-all rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}